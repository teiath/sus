<?php

namespace SUS\SiteBundle\Extension;

use SUS\SiteBundle\Entity\Circuits\PhoneCircuit;
use SUS\SiteBundle\Entity\Requests\Request;
use SUS\SiteBundle\Entity\Requests\NewCircuitRequest;
use SUS\SiteBundle\Entity\Requests\RemoveCircuitRequest;
use SUS\SiteBundle\Entity\Requests\ChangeConnectivityTypeRequest;
use SUS\SiteBundle\Entity\Requests\ActivateServiceRequest;
use SUS\SiteBundle\Entity\Requests\ChangeOwnershipRequest;

use JMS\DiExtraBundle\Annotation as DI;
use SUS\SiteBundle\Entity\Repositories\Circuits\CircuitsRepository;

class RequestService {
    protected $circuitsRepository;

    public function setCircuitsRepository(CircuitsRepository $circuitsRepository) {
        $this->circuitsRepository = $circuitsRepository;
    }

    public function approveRequest(Request $request) {
        $methods = get_class_methods($this);
        $requestClass = get_class($request);
        foreach($methods as $curMethod) {
            $cutMethod = substr($curMethod, 7);
            if($cutMethod != 'Request' && strpos($requestClass, $cutMethod) !== false) {
                return $this->$curMethod($request);
            }
        }
        throw new \Exception('Method not found');
    }

    protected function approveNewCircuitRequest(NewCircuitRequest $request) {
        $circuit = new PhoneCircuit();
        $circuit->setNewCircuitRequest($request);
        $circuit->setConnectivityType($request->getConnectivityType());
        $circuit->setUnit($request->getUnit());
        $circuit->setBandwidthProfile($request->getBandwidthProfile());
        $circuit->setPaidByPsd(true);
        $circuit->setComments($request->getComments());
        $request->setCircuit($circuit);
    }

    protected function approveRemoveCircuitRequest(RemoveCircuitRequest $request) {
        $request->getCircuit()->setDeletedAt(new \DateTime('now'));
    }

    protected function approveChangeConnectivityTypeRequest(ChangeConnectivityTypeRequest $request) {
        $request->getCircuit()->setConnectivityType($request->getNewConnectivityType());
        $request->getCircuit()->setBandwidthProfile($request->getNewBandwidthProfile());
    }

    protected function approveActivateServiceRequest(ActivateServiceRequest $request) {
        $circuit = $this->circuitsRepository->findOneBy(array(
            'number' => $request->getNumber(),
        ));
        if(!isset($circuit)) {
            $circuit = new PhoneCircuit();
            $circuit->setNumber($request->getNumber());
            $circuit->setPaidByPsd(false);
            $circuit->setUnit($request->getUnit());
            $circuit->setComments('Generated by ActivateServiceRequest '.$request->getId());
        }
        $circuit->setConnectivityType($request->getNewConnectivityType());
        $circuit->setBandwidthProfile($request->getNewBandwidthProfile());
        $request->setCircuit($circuit);
    }

    protected function approveChangeOwnershipRequest(ChangeOwnershipRequest $request) {
        $request->getCircuit()->setUnit($request->getNewUnit());
    }
}
?>
